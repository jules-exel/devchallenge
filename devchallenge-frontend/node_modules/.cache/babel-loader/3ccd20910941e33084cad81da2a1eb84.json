{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useForm = (callback, validate) => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [responseData, setResponse] = useState();\n  const baseUrl = \"http://localhost:8080/\";\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [callback, errors, isSubmitting, values, isSuccess, responseData]);\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n    const data = {\n      limit: values.limit\n    };\n    const result = axios.post(baseUrl, data).then(result => {\n      setIsSubmitting(false);\n      setIsSuccess(true);\n    }).catch(error => {\n      setIsSubmitting(false);\n      setIsSuccess(false);\n    });\n    if (result.status === 200) setResponse(result.data.data);\n  };\n\n  const handleChange = event => {\n    setErrors(validate(values));\n    event.persist();\n    setValues(values => ({ ...values,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n    responseData\n  };\n};\n\n_s(useForm, \"/ZcW1P3RYtam6t8td0zVci2dISk=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/jules/devchallenge/devchallenge-frontend/src/useForm.js"],"names":["useState","useEffect","axios","useForm","callback","validate","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","isSuccess","setIsSuccess","responseData","setResponse","baseUrl","Object","keys","length","handleSubmit","event","preventDefault","data","limit","result","post","then","catch","error","status","handleChange","persist","target","name","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AAEpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,YAAD,EAAeC,WAAf,IAA8Bf,QAAQ,EAA5C;AACA,QAAMgB,OAAO,GAAG,wBAAhB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBW,MAApB,KAA+B,CAA/B,IAAoCT,YAAxC,EAAsD;AACjDN,MAAAA,QAAQ;AACZ;AACF,GAJQ,EAIN,CAACA,QAAD,EAAWI,MAAX,EAAmBE,YAAnB,EAAiCJ,MAAjC,EAAyCM,SAAzC,EAAoDE,YAApD,CAJM,CAAT;;AAMA,QAAMM,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AACXb,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEA,UAAMY,IAAI,GAAG;AAAEC,MAAAA,KAAK,EAAElB,MAAM,CAACkB;AAAhB,KAAb;AACA,UAAMC,MAAM,GAAGvB,KAAK,CAACwB,IAAN,CAAWV,OAAX,EAAoBO,IAApB,EACZI,IADY,CACNF,MAAD,IAAY;AAChBd,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAJY,EAIVe,KAJU,CAIHC,KAAD,IAAW;AAClBlB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAPY,CAAf;AAQE,QAAIY,MAAM,CAACK,MAAP,KAAkB,GAAtB,EACEf,WAAW,CAACU,MAAM,CAACF,IAAP,CAAYA,IAAb,CAAX;AACL,GAhBD;;AAkBA,QAAMQ,YAAY,GAAIV,KAAD,IAAW;AAC9BZ,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAe,IAAAA,KAAK,CAACW,OAAN;AACAzB,IAAAA,SAAS,CAACD,MAAM,KAAK,EAAE,GAAGA,MAAL;AAAa,OAACe,KAAK,CAACY,MAAN,CAAaC,IAAd,GAAqBb,KAAK,CAACY,MAAN,CAAaE;AAA/C,KAAL,CAAP,CAAT;AACD,GAJD;;AAMA,SAAO;AACLJ,IAAAA,YADK;AAELX,IAAAA,YAFK;AAGLd,IAAAA,MAHK;AAILE,IAAAA,MAJK;AAKLM,IAAAA;AALK,GAAP;AAOD,CA9CH;;GAAMX,O;;AAgDJ,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios'; \r\n \r\nconst useForm = (callback, validate) => {\r\n\r\n    const [values, setValues] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);  \r\n    const [isSuccess, setIsSuccess] = useState(false);  \r\n    const [responseData, setResponse] = useState();\r\n    const baseUrl = \"http://localhost:8080/\";\r\n\r\n    useEffect(() => {\r\n      if (Object.keys(errors).length === 0 && isSubmitting) { \r\n           callback()\r\n      }\r\n    }, [callback, errors, isSubmitting, values, isSuccess, responseData]);\r\n  \r\n    const handleSubmit = (event) => {\r\n      if (event) event.preventDefault();\r\n      setErrors(validate(values));\r\n      setIsSubmitting(true);\r\n\r\n      const data = { limit: values.limit };  \r\n      const result = axios.post(baseUrl, data)\r\n        .then((result) => {\r\n          setIsSubmitting(false)\r\n          setIsSuccess(true) \r\n        }).catch((error) => {\r\n          setIsSubmitting(false) \r\n          setIsSuccess(false) \r\n        }); \r\n        if (result.status === 200)\r\n          setResponse(result.data.data)\r\n    };\r\n  \r\n    const handleChange = (event) => {\r\n      setErrors(validate(values));\r\n      event.persist();\r\n      setValues(values => ({ ...values, [event.target.name]: event.target.value }));\r\n    };\r\n  \r\n    return {\r\n      handleChange,\r\n      handleSubmit,\r\n      values,\r\n      errors,\r\n      responseData\r\n    }\r\n  };\r\n  \r\n  export default useForm;"]},"metadata":{},"sourceType":"module"}